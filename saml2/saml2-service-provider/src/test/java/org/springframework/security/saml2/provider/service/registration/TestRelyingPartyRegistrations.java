/*
 * Copyright 2002-2020 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.springframework.security.saml2.provider.service.registration;

import org.springframework.security.saml2.credentials.Saml2X509Credential;
import org.springframework.security.saml2.provider.service.servlet.filter.Saml2WebSsoAuthenticationFilter;

import static org.springframework.security.saml2.credentials.TestSaml2X509Credentials.relyingPartySigningCredential;
import static org.springframework.security.saml2.credentials.TestSaml2X509Credentials.relyingPartyVerifyingCredential;

/**
 * Preconfigured test data for {@link RelyingPartyRegistration} objects
 */
public class TestRelyingPartyRegistrations {

	public static RelyingPartyRegistration.Builder relyingPartyRegistration() {
		//remote IDP entity ID
		String idpEntityId = "https://simplesaml-for-spring-saml.cfapps.io/saml2/idp/metadata.php";
		//remote WebSSO Endpoint - Where to Send AuthNRequests to
		String webSsoEndpoint = "https://simplesaml-for-spring-saml.cfapps.io/saml2/idp/SSOService.php";
		//local registration ID
		String registrationId = "simplesamlphp";
		//local entity ID - autogenerated based on URL
		String localEntityIdTemplate = "{baseUrl}/saml2/service-provider-metadata/{registrationId}";
		//local signing (and decryption key)
		Saml2X509Credential signingCredential = relyingPartySigningCredential();
		//IDP certificate for verification of incoming messages
		Saml2X509Credential idpVerificationCertificate = relyingPartyVerifyingCredential();
		String acsUrlTemplate = "{baseUrl}" + Saml2WebSsoAuthenticationFilter.DEFAULT_FILTER_PROCESSES_URI;
		return RelyingPartyRegistration.withRegistrationId(registrationId)
				.providerDetails(c -> c.entityId(idpEntityId))
				.providerDetails(c -> c.webSsoUrl(webSsoEndpoint))
				.credentials(c -> c.add(signingCredential))
				.credentials(c -> c.add(idpVerificationCertificate))
				.localEntityIdTemplate(localEntityIdTemplate)
				.assertionConsumerServiceUrlTemplate(acsUrlTemplate);
	}


}
