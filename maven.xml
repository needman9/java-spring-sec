<project
   xmlns:j="jelly:core"
   xmlns:ant="jelly:ant"
   xmlns:maven="jelly:maven"
  >

   <!--
    |
    | Override the default clover-setup task from the clover plugin
    |
    -->
    <postGoal name="clover:on">

       <ant:clover-setup
           initstring="${basedir}/target/clover/database/clover_coverage.db"
           flushpolicy="interval"
           flushinterval="500">

         <ant:fileset dir="${maven.src.dir}">
            <exclude name="**/*Exception.java"/>
         </ant:fileset>

<!--         <statementContext id="nolog" regexp="^if \(logger.*\).*}"/>
         <statementContext id="nojbosslog" regexp="^if \(super.logger.*\).*}"/>
-->

       </ant:clover-setup>
    </postGoal>


   <!--
    |
    | Create the additional jars...
    | acegi-security.jar will be created as the default project artifact.
    |
    -->
   <preGoal name="jar:jar">

      <!--
       | The Acegi Security Tag Library JAR
       -->
      <ant:jar jarfile="${maven.build.dir}/acegi-taglib-${pom.currentVersion}.jar">
         <fileset dir="${maven.build.dest}">
            <include name="net/sf/acegisecurity/taglibs/**"/>
            <exclude name="**/*.tld"/>
         </fileset>
         <zipfileset dir="${maven.src.dir}/net/sf/acegisecurity/taglibs"
            prefix="META-INF" includes="*.tld" />
         <manifest>
            <attribute name="Acegi-Security-System-version" value="${pom.currentVersion}"/>
            <attribute name="Sealed" value="true"/>
         </manifest>
      </ant:jar>

      <!--
       | The class that has catalina.jar dependencies and thus belongs in
       | Catalina's "Catalina" classloader ($CATALINA_HOME/server/lib directory)
       -->
      <jar jarfile="${maven.build.dir}/acegi-security-catalina-server-${pom.currentVersion}.jar">
         <fileset dir="${maven.build.dest}">
            <include name="net/sf/acegisecurity/adapters/catalina/CatalinaAcegiUserRealm.class"/>
         </fileset>
         <manifest>
            <attribute name="Acegi-Security-System-version" value="${pom.currentVersion}"/>
         </manifest>
      </jar>

      <!--
       | All Acegi Security System for Spring classes that belong in Catalina's
       | "Common" classloader ($CATALINA_HOME/common/lib directory)
       -->
      <jar jarfile="${maven.build.dir}/acegi-security-catalina-common-${pom.currentVersion}.jar">
         <fileset dir="${maven.build.dest}">
            <include name="net/sf/acegisecurity/*"/>
            <include name="net/sf/acegisecurity/context/**"/>
            <include name="net/sf/acegisecurity/providers/**"/>
            <include name="net/sf/acegisecurity/runas/**"/>
            <include name="net/sf/acegisecurity/vote/**"/>
            <include name="net/sf/acegisecurity/ui/**"/>
            <include name="net/sf/acegisecurity/util/**"/>
            <include name="net/sf/acegisecurity/securechannel/**"/>
            <include name="net/sf/acegisecurity/intercept/**"/>
            <include name="net/sf/acegisecurity/adapters/*"/>
            <include name="net/sf/acegisecurity/adapters/catalina/*"/>
            <exclude name="net/sf/acegisecurity/adapters/catalina/CatalinaAcegiUserRealm.class"/>
         </fileset>
         <manifest>
            <attribute name="Acegi-Security-System-version" value="${pom.currentVersion}"/>
         </manifest>
      </jar>

      <!--
       | All Acegi Security System for Spring classes that belong in Jetty's
       | "ext" directory
       -->
      <jar jarfile="${maven.build.dir}/acegi-security-jetty-ext-${pom.currentVersion}.jar">
         <fileset dir="${maven.build.dest}">
            <include name="net/sf/acegisecurity/*"/>
            <include name="net/sf/acegisecurity/context/**"/>
            <include name="net/sf/acegisecurity/providers/**"/>
            <include name="net/sf/acegisecurity/runas/**"/>
            <include name="net/sf/acegisecurity/vote/**"/>
            <include name="net/sf/acegisecurity/ui/**"/>
            <include name="net/sf/acegisecurity/util/**"/>
            <include name="net/sf/acegisecurity/securechannel/**"/>
            <include name="net/sf/acegisecurity/intercept/**"/>
            <include name="net/sf/acegisecurity/adapters/*"/>
            <include name="net/sf/acegisecurity/adapters/jetty/*"/>
         </fileset>
         <manifest>
            <attribute name="Acegi-Security-System-version" value="${pom.currentVersion}"/>
         </manifest>
      </jar>

      <!--
       | All Acegi Security System for Spring classes that belong in JBoss'
       | "server/your_config/lib" directory
       -->
      <jar jarfile="${maven.build.dir}/acegi-security-jboss-lib-${pom.currentVersion}.jar">
         <fileset dir="${maven.build.dest}">
            <include name="net/sf/acegisecurity/*"/>
            <include name="net/sf/acegisecurity/context/**"/>
            <include name="net/sf/acegisecurity/providers/**"/>
            <include name="net/sf/acegisecurity/runas/**"/>
            <include name="net/sf/acegisecurity/vote/**"/>
            <include name="net/sf/acegisecurity/ui/**"/>
            <include name="net/sf/acegisecurity/util/**"/>
            <include name="net/sf/acegisecurity/securechannel/**"/>
            <include name="net/sf/acegisecurity/intercept/**"/>
            <include name="net/sf/acegisecurity/adapters/*"/>
            <include name="net/sf/acegisecurity/adapters/jboss/*"/>
         </fileset>
         <manifest>
            <attribute name="Acegi-Security-System-version" value="${pom.currentVersion}"/>
         </manifest>
      </jar>

      <!--
       | All Acegi Security System for Spring classes that belong in
       | Resin's "lib" directory
       -->
      <jar jarfile="${maven.build.dir}/acegi-security-resin-lib-${pom.currentVersion}.jar">
         <fileset dir="${maven.build.dest}">
            <include name="net/sf/acegisecurity/*"/>
            <include name="net/sf/acegisecurity/context/**"/>
            <include name="net/sf/acegisecurity/providers/**"/>
            <include name="net/sf/acegisecurity/runas/**"/>
            <include name="net/sf/acegisecurity/vote/**"/>
            <include name="net/sf/acegisecurity/ui/**"/>
            <include name="net/sf/acegisecurity/util/**"/>
            <include name="net/sf/acegisecurity/securechannel/**"/>
            <include name="net/sf/acegisecurity/intercept/**"/>
            <include name="net/sf/acegisecurity/adapters/*"/>
            <include name="net/sf/acegisecurity/adapters/resin/*"/>
         </fileset>
         <manifest>
            <attribute name="Acegi-Security-System-version" value="${pom.currentVersion}"/>
         </manifest>
      </jar>

   </preGoal>


   <goal name="preparedocs" description="Extra preparation for the documentation">
   </goal>


   <goal name="docclean" description="Delete temporary and distribution directories for docs">

      <delete quiet="true" dir="${basedir}/${dist.ref.dir}/pdf"/>
      <delete quiet="true" dir="${basedir}/${dist.ref.dir}/html_single"/>
      <delete quiet="true" dir="${basedir}/${dist.ref.dir}/html"/>

   </goal>


   <goal name="docpdf" prereqs="preparedocs" description="Compile reference documentation to pdf">

      <mkdir dir="${basedir}/${dist.ref.dir}/pdf/images"/>

      <copy todir="${basedir}/${dist.ref.dir}/pdf/images">
         <fileset dir="${basedir}/${doc.ref.dir}/src/images">
            <include name="*.gif"/>
            <include name="*.svg"/>
            <include name="*.jpg"/>
         </fileset>
      </copy>

   <!--   ${systemScope.setProperty('javax.xml.transform.TransformerFactory','org.apache.xalan.processor.TransformerFactoryImpl')} -->
      ${systemScope.setProperty('javax.xml.transform.TransformerFactory','com.icl.saxon.TransformerFactoryImpl')}
<!--
     <style   basedir="${basedir}/${doc.ref.dir}/src/"
              extension=".fop"
              destdir="${dist.ref.dir}/pdf"
              style="${basedir}/${doc.ref.dir}/styles/fopdf.xsl"
              includes="index.xml"
      />
-->

      <java classname="com.icl.saxon.StyleSheet" fork="true" dir="${doc.ref.dir}">
         <classpath>
            <fileset dir="${basedir}/${doc.ref.dir}/lib">
               <include name="**/*.jar"/>
            </fileset>
         </classpath>
         <sysproperty key="java.awt.headless" value="true"/>
         <!-- classpath refid="maven.dependency.classpath"/ -->
         <arg value="-o"/>
         <arg value="${basedir}/${doc.ref.dir}/pdf/index.fop"/>
         <arg value="${basedir}/${doc.ref.dir}/src/index.xml"/>
         <arg value="${basedir}/${doc.ref.dir}/styles/fopdf.xsl"/>
      </java>

      <java classname="org.apache.fop.apps.Fop" fork="true" dir="${doc.ref.dir}">
         <classpath>
            <fileset dir="${basedir}/${doc.ref.dir}/lib">
               <include name="**/*.jar"/>
            </fileset>
         </classpath>
         <sysproperty key="java.awt.headless" value="true"/>
         <!-- classpath refid="maven.dependency.classpath"/ -->
         <arg value="${basedir}/${doc.ref.dir}/pdf/index.fop"/>
         <arg value="${basedir}/${doc.ref.dir}/pdf/acegi-security-reference.pdf"/>
      </java>

      <delete file="${dist.ref.dir}/pdf/index.fop"/>

   </goal>


   <goal name="dochtml" prereqs="preparedocs" description="Compile reference documentation to chunked html">

   <!--   ${systemScope.setProperty('javax.xml.transform.TransformerFactory','org.apache.xalan.processor.TransformerFactoryImpl')} -->
      ${systemScope.setProperty('javax.xml.transform.TransformerFactory','com.icl.saxon.TransformerFactoryImpl')}

      <mkdir dir="${doc.ref.dir}/html/images"/>

      <copy todir="${basedir}/${doc.ref.dir}/html/images">
         <fileset dir="${basedir}/${doc.ref.dir}/src/images">
            <include name="*.gif"/>
            <include name="*.svg"/>
            <include name="*.jpg"/>
         </fileset>
      </copy>
<!--
     <style   basedir="${basedir}/${doc.ref.dir}/src/"
              destdir="${doc.ref.dir}/html"
              style="${basedir}/${doc.ref.dir}/styles/html_chunk.xsl"
              includes="index.xml"
      >
         <classpath refid="maven.dependency.classpath"/>
      </style>
-->
      <java classname="com.icl.saxon.StyleSheet" fork="true" dir="${dist.ref.dir}/html/">
         <classpath>
            <fileset dir="${basedir}/${doc.ref.dir}/lib">
               <include name="**/*.jar"/>
            </fileset>
         </classpath>
         <!-- classpath refid="maven.dependency.classpath"/ -->
         <arg value="${basedir}/${doc.ref.dir}/src/index.xml"/>
         <arg value="${basedir}/${doc.ref.dir}/styles/html_chunk.xsl"/>
      </java>

   </goal>


   <goal name="dochtmlsingle" description="Compile reference documentation to single html">

      <mkdir dir="${dist.ref.dir}/html_single/images"/>

      <copy todir="${basedir}/${dist.ref.dir}/html_single/images">
         <fileset dir="${basedir}/${doc.ref.dir}/src/images">
            <include name="*.gif"/>
            <include name="*.svg"/>
            <include name="*.jpg"/>
         </fileset>
      </copy>

      <java classname="com.icl.saxon.StyleSheet" fork="true" dir="${doc.ref.dir}">
         <classpath>
            <fileset dir="${basedir}/${doc.dir}/reference/lib">
               <include name="**/*.jar"/>
            </fileset>
         </classpath>
         <arg value="-o"/>
         <arg value="${basedir}/${dist.ref.dir}/html_single/index.html"/>
         <arg value="${basedir}/${doc.ref.dir}/src/index.xml"/>
         <arg value="${basedir}/${doc.ref.dir}/styles/html.xsl"/>
      </java>

   </goal>

   <goal name="refdoc" prereqs="dochtml,dochtmlsingle,docpdf" description="Generate and copy reference documentation">
      <mkdir dir="${maven.build.dir}/docs"/>
      <mkdir dir="${maven.build.dir}/docs/ref"/>

      <copy todir="${maven.build.dir}/docs/ref">
         <fileset dir="${doc.ref.dir}/html"/>
      </copy>
      <copy file="${doc.ref.dir}/pdf/acegi-security-reference.pdf"
          todir="${maven.build.dir}/docs/ref"/>
      <copy file="${doc.ref.dir}/html_single/index.html"
          tofile="${maven.build.dir}/docs/ref/acegi-security-reference.html"/>
   </goal>

</project>
