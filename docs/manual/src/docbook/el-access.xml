<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="el-access"
    xmlns:xlink="http://www.w3.org/1999/xlink">
    <title>Expression-Based Access Control</title>
    <para> Spring Security 3.0 introduced the ability to use Spring EL expressions as an
        authorization mechanism in addition to the simple use of configuration attributes and
        access-decision voters which have seen before. Expression-based access control is built on
        the same architecture but allows complicated boolean logic to be encapsulated in a single
        expression. </para>
    <section xml:id="el-access-web">
        <title>Web Security Expressions</title>
        <para> To use expressions to secure individual URLs, you would first need to set the
                <literal>use-expressions</literal> attribute in the <literal>&lt;http></literal>
            element to <literal>true</literal>. Spring Security will then expect the
                <literal>access</literal> attributes of the <literal>&lt;intercept-url></literal>
            elements to contain Spring EL expressions. The expressions should evaluate to a boolean,
            defining whether access should be allowed or not. For example:<programlisting><![CDATA[
  <http use-expressions="true">
    <intercept-url pattern="/admin*" 
        access="hasRole('admin') and hasIpAddress('192.168.1.0/24')"/>
    ...
  </http>
]]></programlisting>Here we have defined that the "admin" area of an application should only be
            available to users who have the granted authority <quote>admin</quote> and whose IP
            address matches a local subnet. The expressions <literal>hasRole</literal> and
                <literal>hasIpAddress</literal> are both built in expressions, which are defined by
            the <classname>WebSecurityExpressionRoot</classname> class, an instance of which is used
            as the expression root object when evaluation web-access expressions. See the
            documentation for Spring EL in the main Spring Framework reference if you want to know
            more about the details of expression evaluation. This object also directly exposed the
                <interfacename>HttpServletRequest</interfacename> object under the name
                <quote>request</quote> so you can invoke the request directly in an
            expression.</para>
        <para>If expressions are being used, a <classname>WebExpressionVoter</classname> will be
            added to the <interfacename>AccessDecisionManager</interfacename> which is used by the
            namespace. So if you aren't using the namespace and want to use expressions, you will
            have to add one of these to your configuration.</para>
    </section>
    <section>
        <title>Method Security Expressions</title>
        <para>Method security expressions in Spring Security 3.0 are supported through the use of
            special annotations which allow pre and post-invocation authorization checks.
            Expressions can also be used to filter collections or arrays, based on the permissions
            of the principal invoking the method. Values can be removed from a collection argument
            prior to the invocation of the method or, post-invocation, a returned collection can be
            filtered to remove items to which the user should not have access.</para>
    </section>
</chapter>
