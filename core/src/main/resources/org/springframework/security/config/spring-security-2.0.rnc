
namespace beans = "http://www.springframework.org/schema/beans"
namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"
namespace security = "http://www.springframework.org/schema/security"
datatypes xsd = "http://www.w3.org/2001/XMLSchema-datatypes"

default namespace = "http://www.springframework.org/schema/security"

start = http | ldap

hash =
    ## Defines the hashing algorithm used on user passwords. We recommend strongly against using MD4, as it is a very weak hashing algorithm.
    attribute hash {"sha" | "md5" | "md4" | "{sha}" | "{ssha}"}

base64 = 
    ## Whether a string should be base64 encoded
    attribute base64 {"true" | "false"}

path-type =
    ## Defines the type of pattern used to specify URL paths (either JDK 1.4-compatible regular expressions, or Apache Ant expressions). Defaults to "ant" if unspecified.
    attribute path-type {"ant" | "regex"}

port =
    ## Specifies an IP port number. Used to configure an embedded LDAP server, for example.
    attribute port { xsd:integer }

url =
    ## Specifies a URL.
    attribute url { xsd:string }
    
id = 
    ## A bean identifier, used for referring to the bean elsewhere in the context.
    attribute id {xsd:ID}    
ref =
    ## Defines a reference to a Spring bean id.
    attribute ref {xsd:IDREF}
    
password-encoder = 
    ## element which defines a password encoding strategy. Used by an authentication provider to convert submitted passwords to hashed versions, for example.
    element password-encoder {ref | (hash? & base64? & salt-source*)}  
    
salt-source =
    element salt-source {user-property | system-wide}
user-property =
    ## A property of the UserDetails object which will be used as salt by a password encoder. Typically something like "username" might be used. 
    attribute user-property {xsd:string}
system-wide =
    ## A single value that will be used as the salt for a password encoder. 
    attribute system-wide {xsd:string}


ldap =
    ## Sets up an ldap authentication provider, optionally with an embedded ldap server
    element ldap {ldap.attlist, empty}
ldap.attlist &=
    ## The url indicates the server location. If omitted, an embedded server will be started, optionally with the configured port number.
    (url | port)?

ldap.attlist &=
    ## Explicitly specify an ldif file resource to load into the embedded server
    [ a:defaultValue = "classpath*:*.ldif" ] attribute ldif { xsd:string }?

intercept-methods =
    ## Can be used inside a bean definition to add a security interceptor to the bean and set up access configuration attributes for the bean's methods
    element intercept-methods {intercept-methods.attlist, protect+}

intercept-methods.attlist = empty


protect =
    ## Defines a protected method and the access control configuration attributes that apply to it
    element protect {protect.attlist, empty}

protect.attlist &=
    ## A method name
    attribute method {xsd:string}
protect.attlist &=
    ## Access configuration attributes list that applies to the method, e.g. "ROLE_A,ROLE_B"
    attribute access {xsd:string}


annotation-driven =
	## Activates security annotation scanning. All beans registered in the Spring application context will be scanned for Spring Security annotations. Where found, the beans will automatically be proxied and security authorization applied to the methods accordingly. Please ensure you have the spring-security-tiger-XXX.jar on your classpath.
	element annotation-driven {annotation-driven.attlist}

annotation-driven.attlist = empty


http =
    ## Container element for HTTP security configuration
   element http {http.attlist, (intercept-url+ & form-login? & http-basic? & logout? & concurrent-session-control? & remember-me? & anonymous?) }
http.attlist &=
    ## Automatically registers a login form, BASIC authentication, anonymous authentication, logout services, remember-me and servlet-api-integration. If set to "true", all of these capabilities are added (although you can still customize the configuration of each by providing the respective element). If unspecified, defaults to "false".
    attribute auto-config {"true" | "false" }?
http.attlist &=
    ## Controls the eagerness with which an HTTP session is created. If not set, defaults to "ifRequired".
    attribute create-session {"ifRequired" | "always" | "never" }?
http.attlist &=
    ## The path format used to define the paths in child elements.
    path-type?
http.attlist &=
    ## Whether test URLs should be converted to lower case prior to comparing with defined path patterns. If unspecified, defaults to "true".
    attribute lowercase-comparisons {"true" | "false"}?
http.attlist &=
    ## Provides versions of HttpServletRequest security methods such as isUserInRole() and getPrincipal() which are implemented by accessing the Spring SecurityContext. Defaults to "true".
    attribute servlet-api-provision {"true" | "false"}?
http.attlist &=
    ## Optional attribute specifying the ID of the AccessDecisionManager implementation which should be used for authorizing HTTP requests.
    attribute access-decision-manager {xsd:string}?
http.attlist &=
    ## Optional attribute specifying the realm name that will be used for all authentication features that require a realm name (eg BASIC and Digest authentication). If unspecified, defaults to "Spring Security Application".
    attribute realm {xsd:string}?


intercept-url =
    ## Specifies the access attributes and/or filter list for a particular set of URLs.
    element intercept-url {intercept-url.attlist, empty}
intercept-url.attlist &=
    ## The pattern which defines the URL path. The content will depend on the type set in the containing http element, so will default to ant path syntax.
    attribute pattern {xsd:string}
intercept-url.attlist &=
    ## The access configuration attributes that apply for the configured path.
    attribute access {xsd:string}?
intercept-url.attlist &=
    ## The filter list for the path. Currently can be set to "none" to remove a path from having any filters applied. The full filter stack (consisting of all defined filters, will be applied to any other paths).
    attribute filters {"none"}?
intercept-url.attlist &=
    ## Used to specify that a URL must be accessed over http or https
    attribute requires-channel {"http" | "https"}?

logout =
	## Incorporates a logout processing filter. Most web applications require a logout filter, although you may not require one if you write a controller to provider similar logic.
    element logout {logout.attlist, empty}
logout.attlist &=
	## Specifies the URL that will cause a logout. Spring Security will initialize a filter that responds to this particular URL. Defaults to /j_spring_security_logout if unspecified.
    attribute logout-url {xsd:string}?
logout.attlist &=
	## Specifies the URL to display once the user has logged out. If not specified, defaults to /.
    attribute logout-success-url {xsd:string}?
logout.attlist &=
	## Specifies whether a logout also causes HttpSession invalidation, which is generally desirable. If unspecified, defaults to true.
    attribute invalidate-session {"true" | "false"}?

form-login =
    ## Sets up a form login configuration
    element form-login {form-login.attlist, empty}
form-login.attlist &=
    ## The URL that the login form is posted to. If unspecified, it defaults to /j_spring_security_check.
    attribute login-url {xsd:string}?
form-login.attlist &=
    ## The URL that will be redirected to after successful authentication, if the user's previous action could not be resumed. This generally happens if the user visits a login page without having first requested a secured operation that triggers authentication. If unspecified, defaults to the root of the application.
    attribute default-target-url {xsd:string}?
form-login.attlist &=
    ## The URL for the login page. If no login URL is specified, Spring Security will automatically create a login URL at /spring_security_login and a corresponding filter to render that login URL when requested.
    attribute login-page {xsd:string}?
form-login.attlist &=
    ## The URL for the login failure page. If no login failure URL is specified, Spring Security will automatically create a failure login URL at /spring_security_login?login_error and a corresponding filter to render that login failure URL when requested.
    attribute authentication-failure-url {xsd:string}?

filter-chain-map =
    ## Used to explicitly configure a FilterChainProxy instance with a FilterChainMap
    element filter-chain-map {filter-chain-map.attlist, filter-chain+}
filter-chain-map.attlist &=
    path-type

filter-chain =
    ## Used within filter-chain-map to define a specific URL pattern and the list of filters which apply to the URLs matching that pattern. When multiple filter-chain elements are used within a filter-chain-map element, the most specific patterns must be placed at the top of the list, with  most general ones at the bottom.
    element filter-chain {filter-chain.attlist, empty}
filter-chain.attlist &=
    attribute pattern {xsd:string}
filter-chain.attlist &=
    attribute filters {xsd:string}

http-basic =
    ## Adds support for basic authentication (this is an element to permit future expansion, such as supporting an "ignoreFailure" attribute)
    element http-basic {empty}


concurrent-session-control =
    ## Adds support for concurrent session control, allowing limits to be placed on the number of sessions a user can have.
    element concurrent-session-control {concurrent-sessions.attlist, empty}
concurrent-sessions.attlist &=
    attribute max-sessions {xsd:positiveInteger}?
concurrent-sessions.attlist &=
    attribute expired-url {xsd:string}?
concurrent-sessions.attlist &=
    attribute exception-if-maximum-exceeded {"true" | "false"}?

remember-me =
    element remember-me {remember-me.attlist}
remember-me.attlist &=
    (attribute key {xsd:string} | (attribute token-repository {xsd:string} | attribute data-source {xsd:string}))

anonymous =
	## Adds support for automatically granting all anonymous web requests a particular principal identity and a corresponding granted authority.
    element anonymous {anonymous.attlist}
anonymous.attlist &=
	## The key used between the provider and filter. This generally does not need to be set. If unset, it will default to "doesNotMatter".
    attribute key {xsd:string}?
anonymous.attlist &=
	## The username that should be assigned to the anonymous request. This allows the principal to be identified, which may be important for logging and auditing. if unset, defaults to "anonymousUser".
    attribute username {xsd:string}?
anonymous.attlist &=
	## The granted authority that should be assigned to the anonymous request. Commonly this is used to assign the anonymous request particular roles, which can subsequently be used in authorization decisions. If unset, defaults to "ROLE_ANONYMOUS".
    attribute granted-authority {xsd:string}?

authentication-provider =
  ## Indicates that the contained user-service should be used as an authentication source. May either refer to an external UserDetailsService bean by id (using the "ref" attribute) or contain a child element which creates the service. 
     element authentication-provider {(ref | (user-service | jdbc-user-service)) & password-encoder}
ap.attlist &= 
     attribute ref {xsd:IDREF} 

user-service =
    element user-service {id? & (properties-file | (user*))}
properties-file =
    attribute properties {xsd:string}*

user =
	## Represents a user in the application.
    element user {user.attlist, empty}
user.attlist &=
	## The username assigned to the user.
    attribute name {xsd:string}
user.attlist &=
	## The password assigned to the user. This may be hashed if the corresponding authentication provider supports hashing (remember to set the "hash" attribute of the "user-service" element).
    attribute password {xsd:string}
user.attlist &=
	## One of more authorities granted to the user. Separate authorities with a comma (but no space). For example, "ROLE_USER,ROLE_ADMINISTRATOR"
    attribute authorities {xsd:string}

jdbc-user-service =
	## Causes creation of a JDBC-based UserDetailsService.
    element jdbc-user-service {id? & jdbc-user-service.attlist} 
jdbc-user-service.attlist &=
	## The bean ID of the DataSource which provides the required tables.
    attribute data-source {xsd:string}
