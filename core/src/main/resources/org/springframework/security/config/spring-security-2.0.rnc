
namespace beans = "http://www.springframework.org/schema/beans"
namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"
namespace security = "http://www.springframework.org/schema/security"
datatypes xsd = "http://www.w3.org/2001/XMLSchema-datatypes"

default namespace = "http://www.springframework.org/schema/security"

# targetNamespace="http://www.springframework.org/schema/security"

path-type =
    ## Defines the type types of pattern used to specify URL paths. Defaults to "ant"
    [ a:defaultValue = "ant" ] attribute pathType {"regex" | "ant"}

autoconfig = 
    ## Provides automatic security configration for a application
    element autoconfig {autoconfig.attlist, empty}
autoconfig.attlist = empty

ldap = 
    ## Sets up an ldap authentication provider, optionally with an embedded ldap server
    element ldap {ldap.attlist, empty}
ldap.attlist &=
    ## Specifies the ldap server Url. If omitted, an embedded server will be created    
    attribute url { xsd:string }?
ldap.attlist &=
    ## Explicitly specify an ldif file resource to load 
    [ a:defaultValue = "classpath:*.ldif" ] attribute ldif { xsd:string }?

intercept-methods = 
    ## Can be used inside a bean definition to add a security interceptor to the bean and set up access 
    ## configuration attributes for the bean's methods
    element intercept-methods {intercept-methods.attlist, protect+} 

intercept-methods.attlist = empty

protect = 
    ## Defines a protected method and the access control configuration attributes that apply to it
    element protect {protect.attlist, empty}

protect.attlist &=
    ## A method name 
    attribute method {xsd:string}
protect.attlist &=
    ## Access configuration attributes list that applies to the method, e.g. "ROLE_A,ROLE_B"
    attribute access {xsd:string}


http =
    ## Container element for HTTP security configuration
   element http {http.attlist, (intercept-url+ & form-login? & http-basic? & logout? & concurrent-session-control? & remember-me?) }
http.attlist &=
    ## Controls the eagerness with which an HTTP session is created.
    [ a:defaultValue = "ifRequired" ] attribute createSession {"ifRequired" | "always" | "never" }?
http.attlist &=
    ## The path format used to define the paths used in child elements. 
    path-type?
http.attlist &=
    ## Whether test URLs should be converted to lower case prior to comparing with defined path patterns.
    [ a:defaultValue = "true" ] attribute lowerCaseComparisons {"true" | "false"}?
http.attlist &=
    ## Optional attribute specifying the ID of the AccessDecisionManager implementation which should be
    ## used for authorizing HTTP requests.
    attribute accessDecisionManager {xsd:string}?


intercept-url =
    ## Specifies the access attributes and/or filter list for a particular set of URLs.
    element intercept-url {intercept-url.attlist, empty}
intercept-url.attlist &=
    ## The pattern which defines the URL path. The content will depend on the type set in the containing http element, so will
    ## default to ant path syntax.    
    attribute pattern {xsd:string} 
intercept-url.attlist &=
    ## The access configuration attributes that apply for the configured path.
    attribute access {xsd:string}?
    ## The filter list for the path. Currently can be set to "none" to remove a path from having any filters applied.
    ## The full filter stack (consisting of all defined filters, will be applied to any other paths).
intercept-url.attlist &=
    attribute filters {"none"}?
intercept-url.attlist &=
    ## Used to specify that a URL must be accessed over http or https
    attribute requiresChannel {"http" | "https"}?

logout =
    element logout {logout.attlist, empty}
logout.attlist &=
    [ a:defaultValue = "/j_spring_security_logout" ] attribute logoutUrl {xsd:string}?
logout.attlist &=
    [ a:defaultValue = "/" ] attribute logoutSuccessUrl {xsd:string}?
logout.attlist &=
    [ a:defaultValue = "true" ] attribute invalidateSession {"true" | "false"}?

form-login =
    ## Sets up a form login configuration
    element form-login {form-login.attlist, empty}    
form-login.attlist &=
    ## The URL that the form is submitted to
    [ a:defaultValue = "/j_spring_security_check" ] attribute loginUrl {xsd:string}?   
form-login.attlist &=
    ## The URL for the login page
    attribute loginPage {xsd:string}?   

filter-chain-map = 
    ## Used to explicitly configure a FilterChainProxy instance with a FilterChainMap
    element filter-chain-map {filter-chain-map.attlist, filter-chain+}
filter-chain-map.attlist &=
    path-type    

filter-chain =
    ## Used within filter-chain-map to define a specific URL pattern and the list of filters 
    ## which apply to the URLs matching that pattern. When multiple filter-chain elements are used within a
    ## filter-chain-map element, the most specific patterns must be placed at the top of the list, with 
    ## most general ones at the bottom.
    element filter-chain {filter-chain.attlist, empty}
filter-chain.attlist &= 
    attribute pattern {xsd:string}
filter-chain.attlist &= 
    attribute filters {xsd:string}

http-basic =
    ## Adds support for basic authentication
    element http-basic {http-basic.attlist, empty}
http-basic.attlist &= 
    attribute realm {xsd:string}

concurrent-session-control =
    ## Adds support for concurrent session control, allowing limits to be placed on the number of sessions a
    ## user can have.
    element concurrent-session-control {concurrent-sessions.attlist, empty}
concurrent-sessions.attlist &=
    attribute maxSessions {xsd:positiveInteger}?
concurrent-sessions.attlist &=
    attribute expiredUrl {xsd:string}?
concurrent-sessions.attlist &=
    attribute exceptionIfMaximumExceeded {"true" | "false"}?

remember-me = 
    element remember-me {remember-me.attlist} 
    
remember-me.attlist &= 
    (attribute key {xsd:string} | (attribute tokenRepository {xsd:string} | attribute datasource {xsd:string}))        
    
authentication-provider =
    element authentication-provider {authentication-provider.attlist, (user-service | jdbc-user-service)}
authentication-provider.attlist &= empty

user-service =
    element user-service {user-service.attlist, (user* | jdbc-user-service)}
user-service.attlist &=
    attribute properties {xsd:string}*

user =
    element user {user.attlist, empty}
user.attlist &=
    attribute name {xsd:string}
user.attlist &=
    attribute password {xsd:string}
user.attlist &=
    attribute authorities {xsd:string}

jdbc-user-service =
    element jdbc-user-service {jdbc-users.attlist, empty}
jdbc-users.attlist &= empty

