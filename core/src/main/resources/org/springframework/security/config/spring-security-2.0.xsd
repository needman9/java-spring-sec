<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" targetNamespace="http://www.springframework.org/schema/security" xmlns:security="http://www.springframework.org/schema/security">
  <!-- targetNamespace="http://www.springframework.org/schema/security" -->
  <xs:attributeGroup name="pathType">
    <xs:attribute name="pathType" use="required">
      <xs:annotation>
        <xs:documentation>Defines the type of pattern used to specify URL paths (either JDK 1.4-compatible regular expressions, or Apache Ant expressions). Defaults to "ant" if unspecified.</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="ant"/>
          <xs:enumeration value="regex"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="port">
    <xs:attribute name="port" use="required" type="xs:integer">
      <xs:annotation>
        <xs:documentation>Specifies an IP port number. Used to configure an embedded LDAP server, for example. </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="url">
    <xs:attribute name="url" use="required" type="xs:string">
      <xs:annotation>
        <xs:documentation>Specifies a URL.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:element name="ldap">
    <xs:annotation>
      <xs:documentation>Sets up an ldap authentication provider, optionally with an embedded ldap server</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attributeGroup ref="security:ldap.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="ldap.attlist">
    <xs:attribute name="url" type="xs:string">
      <xs:annotation>
        <xs:documentation>Specifies a URL.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="port" type="xs:integer">
      <xs:annotation>
        <xs:documentation>Specifies an IP port number. Used to configure an embedded LDAP server, for example. </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ldif" default="classpath:*.ldif" type="xs:string">
      <xs:annotation>
        <xs:documentation>Explicitly specify an ldif file resource to load into the embedded server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:element name="intercept-methods">
    <xs:annotation>
      <xs:documentation>Can be used inside a bean definition to add a security interceptor to the bean and set up access configuration attributes for the bean's methods</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="security:protect"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="protect">
    <xs:annotation>
      <xs:documentation>Defines a protected method and the access control configuration attributes that apply to it</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attributeGroup ref="security:protect.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="protect.attlist">
    <xs:attribute name="method" use="required" type="xs:string">
      <xs:annotation>
        <xs:documentation>A method name </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="access" use="required" type="xs:string">
      <xs:annotation>
        <xs:documentation>Access configuration attributes list that applies to the method, e.g. "ROLE_A,ROLE_B"</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:element name="http">
    <xs:annotation>
      <xs:documentation>Container element for HTTP security configuration</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="security:intercept-url"/>
        <xs:element ref="security:form-login"/>
        <xs:element ref="security:http-basic"/>
        <xs:element ref="security:logout"/>
        <xs:element ref="security:concurrent-session-control"/>
        <xs:element ref="security:remember-me"/>
        <xs:element ref="security:anonymous"/>
      </xs:choice>
      <xs:attributeGroup ref="security:http.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="http.attlist">
    <xs:attribute name="autoConfig">
      <xs:annotation>
        <xs:documentation>Automatically registers a login form, BASIC authentication, anonymous authentication, logout services and remember-me. If set to "true", all of these capabilities are added (although you can still customize the configuration of each by providing the respective element). If unspecified, defaults to "false".</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="true"/>
          <xs:enumeration value="false"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="createSession">
      <xs:annotation>
        <xs:documentation>Controls the eagerness with which an HTTP session is created. If not set, defaults to "ifRequired".</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="ifRequired"/>
          <xs:enumeration value="always"/>
          <xs:enumeration value="never"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="pathType">
      <xs:annotation>
        <xs:documentation>Defines the type of pattern used to specify URL paths (either JDK 1.4-compatible regular expressions, or Apache Ant expressions). Defaults to "ant" if unspecified.</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="ant"/>
          <xs:enumeration value="regex"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="lowercaseComparisons">
      <xs:annotation>
        <xs:documentation>Whether test URLs should be converted to lower case prior to comparing with defined path patterns. If unspecified, defaults to "true".</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="true"/>
          <xs:enumeration value="false"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="accessDecisionManager" type="xs:string">
      <xs:annotation>
        <xs:documentation>Optional attribute specifying the ID of the AccessDecisionManager implementation which should be used for authorizing HTTP requests.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="realm" type="xs:string">
      <xs:annotation>
        <xs:documentation>Optional attribute specifying the realm name that will be used for all authentication features that require a realm name (eg BASIC and Digest authentication). If unspecified, defaults to "Spring Security Application".</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:element name="intercept-url">
    <xs:annotation>
      <xs:documentation>Specifies the access attributes and/or filter list for a particular set of URLs.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attributeGroup ref="security:intercept-url.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="intercept-url.attlist">
    <xs:attribute name="pattern" use="required" type="xs:string">
      <xs:annotation>
        <xs:documentation>The pattern which defines the URL path. The content will depend on the type set in the containing http element, so will default to ant path syntax.    </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="access" type="xs:string">
      <xs:annotation>
        <xs:documentation>The access configuration attributes that apply for the configured path.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="filters">
      <xs:annotation>
        <xs:documentation>The filter list for the path. Currently can be set to "none" to remove a path from having any filters applied. The full filter stack (consisting of all defined filters, will be applied to any other paths).</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="none"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="requiresChannel">
      <xs:annotation>
        <xs:documentation>Used to specify that a URL must be accessed over http or https</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="http"/>
          <xs:enumeration value="https"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:element name="logout">
    <xs:annotation>
      <xs:documentation>Incorporates a logout processing filter. Most web applications require a logout filter, although you may not require one if you write a controller to provider similar logic.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attributeGroup ref="security:logout.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="logout.attlist">
    <xs:attribute name="logoutUrl" type="xs:string">
      <xs:annotation>
        <xs:documentation>Specifies the URL that will cause a logout. Spring Security will initialize a filter that responds to this particular URL. Defaults to /j_spring_security_logout if unspecified.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logoutSuccessUrl" type="xs:string">
      <xs:annotation>
        <xs:documentation>Specifies the URL to display once the user has logged out. If not specified, defaults to /.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="invalidateSession">
      <xs:annotation>
        <xs:documentation>Specifies whether a logout also causes HttpSession invalidation, which is generally desirable. If unspecified, defaults to true.</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="true"/>
          <xs:enumeration value="false"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:element name="form-login">
    <xs:annotation>
      <xs:documentation>Sets up a form login configuration</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attributeGroup ref="security:form-login.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="form-login.attlist">
    <xs:attribute name="loginUrl" type="xs:string">
      <xs:annotation>
        <xs:documentation>The URL that the login form is posted to. If unspecified, it defaults to /j_spring_security_check.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="defaultTargetUrl" type="xs:string">
      <xs:annotation>
        <xs:documentation>The URL that will be redirected to after successful authentication, if the user's previous action could not be resumed. This generally happens if the user visits a login page without having first requested a secured operation that triggers authentication. If unspecified, defaults to the root of the application.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="loginPage" type="xs:string">
      <xs:annotation>
        <xs:documentation>The URL for the login page. If no login URL is specified, Spring Security will automatically create a login URL at /spring_security_login and a corresponding filter to render that login URL when requested.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authenticationFailureUrl" type="xs:string">
      <xs:annotation>
        <xs:documentation>The URL for the login failure page. If no login failure URL is specified, Spring Security will automatically create a failure login URL at /spring_security_login?login_error and a corresponding filter to render that login failure URL when requested.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:element name="filter-chain-map">
    <xs:annotation>
      <xs:documentation>Used to explicitly configure a FilterChainProxy instance with a FilterChainMap</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="security:filter-chain"/>
      </xs:sequence>
      <xs:attributeGroup ref="security:filter-chain-map.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="filter-chain-map.attlist">
    <xs:attributeGroup ref="security:pathType"/>
  </xs:attributeGroup>
  <xs:element name="filter-chain">
    <xs:annotation>
      <xs:documentation>Used within filter-chain-map to define a specific URL pattern and the list of filters which apply to the URLs matching that pattern. When multiple filter-chain elements are used within a filter-chain-map element, the most specific patterns must be placed at the top of the list, with  most general ones at the bottom.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attributeGroup ref="security:filter-chain.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="filter-chain.attlist">
    <xs:attribute name="pattern" use="required" type="xs:string"/>
    <xs:attribute name="filters" use="required" type="xs:string"/>
  </xs:attributeGroup>
  <xs:element name="http-basic">
    <xs:annotation>
      <xs:documentation>Adds support for basic authentication (this is an element to permit future expansion, such as supporting an "ignoreFailure" attribute)</xs:documentation>
    </xs:annotation>
    <xs:complexType/>
  </xs:element>
  <xs:element name="concurrent-session-control">
    <xs:annotation>
      <xs:documentation>Adds support for concurrent session control, allowing limits to be placed on the number of sessions a user can have.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attributeGroup ref="security:concurrent-sessions.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="concurrent-sessions.attlist">
    <xs:attribute name="maxSessions" type="xs:positiveInteger"/>
    <xs:attribute name="expiredUrl" type="xs:string"/>
    <xs:attribute name="exceptionIfMaximumExceeded">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="true"/>
          <xs:enumeration value="false"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:element name="remember-me">
    <xs:complexType>
      <xs:attributeGroup ref="security:remember-me.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="remember-me.attlist">
    <xs:attribute name="key" type="xs:string"/>
    <xs:attribute name="tokenRepository" type="xs:string"/>
    <xs:attribute name="datasource" type="xs:string"/>
  </xs:attributeGroup>
  <xs:element name="anonymous">
    <xs:annotation>
      <xs:documentation>Adds support for automatically granting all anonymous web requests a particular principal identity and a corresponding granted authority.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attributeGroup ref="security:anonymous.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="anonymous.attlist">
    <xs:attribute name="key" type="xs:string">
      <xs:annotation>
        <xs:documentation>The key used between the provider and filter. This generally does not need to be set. If unset, it will default to "doesNotMatter".</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>The username that should be assigned to the anonymous request. This allows the principal to be identified, which may be important for logging and auditing. if unset, defaults to "anonymousUser". </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="grantedAuthority" type="xs:string">
      <xs:annotation>
        <xs:documentation>The granted authority that should be assigned to the anonymous request. Commonly this is used to assign the anonymous request particular roles, which can subsequently be used in authorization decisions. If unset, defaults to "ROLE_ANONYMOUS".</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:element name="repository">
    <xs:complexType>
      <xs:choice>
        <xs:element ref="security:user-service"/>
        <xs:element ref="security:jdbc-user-service"/>
        <xs:element ref="security:custom-user-service"/>
      </xs:choice>
      <xs:attributeGroup ref="security:repository.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="repository.attlist">
    <xs:attribute name="createProvider">
      <xs:annotation>
        <xs:documentation>Indicates the repository should have an authentication provider created. If unspecified, defaults to true.</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="true"/>
          <xs:enumeration value="false"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:element name="user-service">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="security:user"/>
      </xs:sequence>
      <xs:attributeGroup ref="security:user-service.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="user-service.attlist">
    <xs:attribute name="properties" type="xs:string"/>
  </xs:attributeGroup>
  <xs:element name="user">
    <xs:complexType>
      <xs:attributeGroup ref="security:user.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="user.attlist">
    <xs:attribute name="name" use="required" type="xs:string"/>
    <xs:attribute name="password" use="required" type="xs:string"/>
    <xs:attribute name="authorities" use="required" type="xs:string"/>
  </xs:attributeGroup>
  <xs:element name="jdbc-user-service">
    <xs:annotation>
      <xs:documentation>Causes creation of a JDBC-based UserDetailsService.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attributeGroup ref="security:jdbc-user-service.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="jdbc-user-service.attlist">
    <xs:attribute name="dataSource" use="required" type="xs:string">
      <xs:annotation>
        <xs:documentation>The bean ID of the DataSource which provides the required tables.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:element name="custom-user-service">
    <xs:complexType>
      <xs:attributeGroup ref="security:custom-user-service.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="custom-user-service.attlist">
    <xs:attribute name="id" use="required" type="xs:string">
      <xs:annotation>
        <xs:documentation>The bean ID of your custom UserDetailsService implementation.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
</xs:schema>
