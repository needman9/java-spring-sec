<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" targetNamespace="http://www.springframework.org/schema/security" xmlns:security="http://www.springframework.org/schema/security">
  <xs:attributeGroup name="hash">
    <xs:attribute name="hash" use="required">
      <xs:annotation>
        <xs:documentation>Defines the hashing algorithm used on user passwords. We recommend strongly against using MD4, as it is a very weak hashing algorithm.</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="sha"/>
          <xs:enumeration value="md5"/>
          <xs:enumeration value="md4"/>
          <xs:enumeration value="{sha}"/>
          <xs:enumeration value="{ssha}"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="base64">
    <xs:attribute name="base64" use="required">
      <xs:annotation>
        <xs:documentation>Whether a string should be base64 encoded</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="true"/>
          <xs:enumeration value="false"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="path-type">
    <xs:attribute name="path-type" use="required">
      <xs:annotation>
        <xs:documentation>Defines the type of pattern used to specify URL paths (either JDK 1.4-compatible regular expressions, or Apache Ant expressions). Defaults to "ant" if unspecified.</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="ant"/>
          <xs:enumeration value="regex"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="port">
    <xs:attribute name="port" use="required" type="xs:integer">
      <xs:annotation>
        <xs:documentation>Specifies an IP port number. Used to configure an embedded LDAP server, for example.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="url">
    <xs:attribute name="url" use="required" type="xs:string">
      <xs:annotation>
        <xs:documentation>Specifies a URL.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="id">
    <xs:attribute name="id" use="required" type="xs:ID">
      <xs:annotation>
        <xs:documentation>A bean identifier, used for referring to the bean elsewhere in the context.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="ref">
    <xs:attribute name="ref" use="required" type="xs:IDREF">
      <xs:annotation>
        <xs:documentation>Defines a reference to a Spring bean id.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:element name="password-encoder">
    <xs:annotation>
      <xs:documentation>element which defines a password encoding strategy. Used by an authentication provider to convert submitted passwords to hashed versions, for example.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="security:salt-source"/>
      </xs:sequence>
      <xs:attribute name="ref" type="xs:IDREF">
        <xs:annotation>
          <xs:documentation>Defines a reference to a Spring bean id.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="hash">
        <xs:annotation>
          <xs:documentation>Defines the hashing algorithm used on user passwords. We recommend strongly against using MD4, as it is a very weak hashing algorithm.</xs:documentation>
        </xs:annotation>
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="sha"/>
            <xs:enumeration value="md5"/>
            <xs:enumeration value="md4"/>
            <xs:enumeration value="{sha}"/>
            <xs:enumeration value="{ssha}"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="base64">
        <xs:annotation>
          <xs:documentation>Whether a string should be base64 encoded</xs:documentation>
        </xs:annotation>
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="true"/>
            <xs:enumeration value="false"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="salt-source">
    <xs:complexType>
      <xs:attribute name="user-property" type="xs:string">
        <xs:annotation>
          <xs:documentation>A property of the UserDetails object which will be used as salt by a password encoder. Typically something like "username" might be used. </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="system-wide" type="xs:string">
        <xs:annotation>
          <xs:documentation>A single value that will be used as the salt for a password encoder. </xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="user-property">
    <xs:attribute name="user-property" use="required" type="xs:string">
      <xs:annotation>
        <xs:documentation>A property of the UserDetails object which will be used as salt by a password encoder. Typically something like "username" might be used. </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="system-wide">
    <xs:attribute name="system-wide" use="required" type="xs:string">
      <xs:annotation>
        <xs:documentation>A single value that will be used as the salt for a password encoder. </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:element name="ldap-server">
    <xs:annotation>
      <xs:documentation>Defines an LDAP server location or starts an embedded server. The url indicates the location of a remote server. If no url is given, an embedded server will be started, listening on the supplied port number. The port is optional and defaults to 33389. A Spring LDAP ContextSource bean will be registered for the server with the id supplied. </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attributeGroup ref="security:ldap-server.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="ldap-server.attlist">
    <xs:attribute name="id" type="xs:ID">
      <xs:annotation>
        <xs:documentation>A bean identifier, used for referring to the bean elsewhere in the context.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="url" type="xs:string">
      <xs:annotation>
        <xs:documentation>Specifies a URL.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="port" type="xs:integer">
      <xs:annotation>
        <xs:documentation>Specifies an IP port number. Used to configure an embedded LDAP server, for example.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="manager-dn" type="xs:string">
      <xs:annotation>
        <xs:documentation>Username (DN) of the "manager" user identity which will be used to authenticate to a (non-embedded) LDAP server. If omitted, anonymous access will be used. </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="manager-password" type="xs:string"/>
    <xs:attribute name="ldif" type="xs:string">
      <xs:annotation>
        <xs:documentation>Explicitly specifies an ldif file resource to load into an embedded LDAP server</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="root" type="xs:string">
      <xs:annotation>
        <xs:documentation>Optional root suffix for the embedded LDAP server. Default is "dc=springframework,dc=org"</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:element name="ldap-authentication-provider">
    <xs:annotation>
      <xs:documentation>Sets up an ldap authentication provider</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attributeGroup ref="security:ldap-ap.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="ldap-ap.attlist">
    <xs:attribute name="server-ref" type="xs:IDREF">
      <xs:annotation>
        <xs:documentation>The server to authenticate against.  </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:element name="intercept-methods">
    <xs:annotation>
      <xs:documentation>Can be used inside a bean definition to add a security interceptor to the bean and set up access configuration attributes for the bean's methods</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="security:protect"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="protect">
    <xs:annotation>
      <xs:documentation>Defines a protected method and the access control configuration attributes that apply to it</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attributeGroup ref="security:protect.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="protect.attlist">
    <xs:attribute name="method" use="required" type="xs:string">
      <xs:annotation>
        <xs:documentation>A method name</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="access" use="required" type="xs:string">
      <xs:annotation>
        <xs:documentation>Access configuration attributes list that applies to the method, e.g. "ROLE_A,ROLE_B"</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:element name="annotation-driven">
    <xs:annotation>
      <xs:documentation>Activates security annotation scanning. All beans registered in the Spring application context will be scanned for Spring Security annotations. Where found, the beans will automatically be proxied and security authorization applied to the methods accordingly. Please ensure you have the spring-security-tiger-XXX.jar on your classpath.</xs:documentation>
    </xs:annotation>
    <xs:complexType/>
  </xs:element>
  <xs:element name="http">
    <xs:annotation>
      <xs:documentation>Container element for HTTP security configuration</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="security:intercept-url"/>
        <xs:element ref="security:form-login"/>
        <xs:element ref="security:http-basic"/>
        <xs:element ref="security:logout"/>
        <xs:element ref="security:concurrent-session-control"/>
        <xs:element ref="security:remember-me"/>
        <xs:element ref="security:anonymous"/>
      </xs:choice>
      <xs:attributeGroup ref="security:http.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="http.attlist">
    <xs:attribute name="auto-config">
      <xs:annotation>
        <xs:documentation>Automatically registers a login form, BASIC authentication, anonymous authentication, logout services, remember-me and servlet-api-integration. If set to "true", all of these capabilities are added (although you can still customize the configuration of each by providing the respective element). If unspecified, defaults to "false".</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="true"/>
          <xs:enumeration value="false"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="create-session">
      <xs:annotation>
        <xs:documentation>Controls the eagerness with which an HTTP session is created. If not set, defaults to "ifRequired".</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="ifRequired"/>
          <xs:enumeration value="always"/>
          <xs:enumeration value="never"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="path-type">
      <xs:annotation>
        <xs:documentation>Defines the type of pattern used to specify URL paths (either JDK 1.4-compatible regular expressions, or Apache Ant expressions). Defaults to "ant" if unspecified.</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="ant"/>
          <xs:enumeration value="regex"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="lowercase-comparisons">
      <xs:annotation>
        <xs:documentation>Whether test URLs should be converted to lower case prior to comparing with defined path patterns. If unspecified, defaults to "true".</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="true"/>
          <xs:enumeration value="false"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="servlet-api-provision">
      <xs:annotation>
        <xs:documentation>Provides versions of HttpServletRequest security methods such as isUserInRole() and getPrincipal() which are implemented by accessing the Spring SecurityContext. Defaults to "true".</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="true"/>
          <xs:enumeration value="false"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="access-decision-manager" type="xs:IDREF">
      <xs:annotation>
        <xs:documentation>Optional attribute specifying the ID of the AccessDecisionManager implementation which should be used for authorizing HTTP requests.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="realm" type="xs:string">
      <xs:annotation>
        <xs:documentation>Optional attribute specifying the realm name that will be used for all authentication features that require a realm name (eg BASIC and Digest authentication). If unspecified, defaults to "Spring Security Application".</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:element name="intercept-url">
    <xs:annotation>
      <xs:documentation>Specifies the access attributes and/or filter list for a particular set of URLs.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attributeGroup ref="security:intercept-url.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="intercept-url.attlist">
    <xs:attribute name="pattern" use="required" type="xs:string">
      <xs:annotation>
        <xs:documentation>The pattern which defines the URL path. The content will depend on the type set in the containing http element, so will default to ant path syntax.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="access" type="xs:string">
      <xs:annotation>
        <xs:documentation>The access configuration attributes that apply for the configured path.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="filters">
      <xs:annotation>
        <xs:documentation>The filter list for the path. Currently can be set to "none" to remove a path from having any filters applied. The full filter stack (consisting of all defined filters, will be applied to any other paths).</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="none"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="requires-channel">
      <xs:annotation>
        <xs:documentation>Used to specify that a URL must be accessed over http or https</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="http"/>
          <xs:enumeration value="https"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:element name="logout">
    <xs:annotation>
      <xs:documentation>Incorporates a logout processing filter. Most web applications require a logout filter, although you may not require one if you write a controller to provider similar logic.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attributeGroup ref="security:logout.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="logout.attlist">
    <xs:attribute name="logout-url" type="xs:string">
      <xs:annotation>
        <xs:documentation>Specifies the URL that will cause a logout. Spring Security will initialize a filter that responds to this particular URL. Defaults to /j_spring_security_logout if unspecified.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logout-success-url" type="xs:string">
      <xs:annotation>
        <xs:documentation>Specifies the URL to display once the user has logged out. If not specified, defaults to /.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="invalidate-session">
      <xs:annotation>
        <xs:documentation>Specifies whether a logout also causes HttpSession invalidation, which is generally desirable. If unspecified, defaults to true.</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="true"/>
          <xs:enumeration value="false"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:element name="form-login">
    <xs:annotation>
      <xs:documentation>Sets up a form login configuration</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attributeGroup ref="security:form-login.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="form-login.attlist">
    <xs:attribute name="login-url" type="xs:string">
      <xs:annotation>
        <xs:documentation>The URL that the login form is posted to. If unspecified, it defaults to /j_spring_security_check.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="default-target-url" type="xs:string">
      <xs:annotation>
        <xs:documentation>The URL that will be redirected to after successful authentication, if the user's previous action could not be resumed. This generally happens if the user visits a login page without having first requested a secured operation that triggers authentication. If unspecified, defaults to the root of the application.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="login-page" type="xs:string">
      <xs:annotation>
        <xs:documentation>The URL for the login page. If no login URL is specified, Spring Security will automatically create a login URL at /spring_security_login and a corresponding filter to render that login URL when requested.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authentication-failure-url" type="xs:string">
      <xs:annotation>
        <xs:documentation>The URL for the login failure page. If no login failure URL is specified, Spring Security will automatically create a failure login URL at /spring_security_login?login_error and a corresponding filter to render that login failure URL when requested.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:element name="filter-chain-map">
    <xs:annotation>
      <xs:documentation>Used to explicitly configure a FilterChainProxy instance with a FilterChainMap</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="security:filter-chain"/>
      </xs:sequence>
      <xs:attributeGroup ref="security:filter-chain-map.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="filter-chain-map.attlist">
    <xs:attributeGroup ref="security:path-type"/>
  </xs:attributeGroup>
  <xs:element name="filter-chain">
    <xs:annotation>
      <xs:documentation>Used within filter-chain-map to define a specific URL pattern and the list of filters which apply to the URLs matching that pattern. When multiple filter-chain elements are used within a filter-chain-map element, the most specific patterns must be placed at the top of the list, with  most general ones at the bottom.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attributeGroup ref="security:filter-chain.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="filter-chain.attlist">
    <xs:attribute name="pattern" use="required" type="xs:string"/>
    <xs:attribute name="filters" use="required" type="xs:string"/>
  </xs:attributeGroup>
  <xs:element name="http-basic">
    <xs:annotation>
      <xs:documentation>Adds support for basic authentication (this is an element to permit future expansion, such as supporting an "ignoreFailure" attribute)</xs:documentation>
    </xs:annotation>
    <xs:complexType/>
  </xs:element>
  <xs:element name="concurrent-session-control">
    <xs:annotation>
      <xs:documentation>Adds support for concurrent session control, allowing limits to be placed on the number of sessions a user can have.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attributeGroup ref="security:concurrent-sessions.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="concurrent-sessions.attlist">
    <xs:attribute name="max-sessions" type="xs:positiveInteger"/>
    <xs:attribute name="expired-url" type="xs:string"/>
    <xs:attribute name="exception-if-maximum-exceeded">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="true"/>
          <xs:enumeration value="false"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:element name="remember-me">
    <xs:complexType>
      <xs:attributeGroup ref="security:remember-me.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="remember-me.attlist">
    <xs:attribute name="key" type="xs:string"/>
    <xs:attribute name="token-repository" type="xs:IDREF"/>
    <xs:attribute name="data-source" type="xs:string"/>
  </xs:attributeGroup>
  <xs:element name="anonymous">
    <xs:annotation>
      <xs:documentation>Adds support for automatically granting all anonymous web requests a particular principal identity and a corresponding granted authority.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attributeGroup ref="security:anonymous.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="anonymous.attlist">
    <xs:attribute name="key" type="xs:string">
      <xs:annotation>
        <xs:documentation>The key used between the provider and filter. This generally does not need to be set. If unset, it will default to "doesNotMatter".</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="username" type="xs:string">
      <xs:annotation>
        <xs:documentation>The username that should be assigned to the anonymous request. This allows the principal to be identified, which may be important for logging and auditing. if unset, defaults to "anonymousUser".</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="granted-authority" type="xs:string">
      <xs:annotation>
        <xs:documentation>The granted authority that should be assigned to the anonymous request. Commonly this is used to assign the anonymous request particular roles, which can subsequently be used in authorization decisions. If unset, defaults to "ROLE_ANONYMOUS".</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:element name="authentication-provider">
    <xs:annotation>
      <xs:documentation>Indicates that the contained user-service should be used as an authentication source. </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:choice>
          <xs:element ref="security:user-service"/>
          <xs:element ref="security:jdbc-user-service"/>
        </xs:choice>
        <xs:element ref="security:password-encoder"/>
      </xs:choice>
      <xs:attributeGroup ref="security:ap.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="ap.attlist">
    <xs:attribute name="user-service-ref" type="xs:IDREF">
      <xs:annotation>
        <xs:documentation>Specifies a reference to a separately configured UserDetailsService from which to obtain authentication data.  </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:element name="user-service">
    <xs:annotation>
      <xs:documentation>Creates an in-memory UserDetailsService from a properties file or a list of "user" child elements.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="security:user"/>
      </xs:sequence>
      <xs:attribute name="id" type="xs:ID">
        <xs:annotation>
          <xs:documentation>A bean identifier, used for referring to the bean elsewhere in the context.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attributeGroup ref="security:properties-file"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="properties-file">
    <xs:attribute name="properties" type="xs:string"/>
  </xs:attributeGroup>
  <xs:element name="user">
    <xs:annotation>
      <xs:documentation>Represents a user in the application.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attributeGroup ref="security:user.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="user.attlist">
    <xs:attribute name="name" use="required" type="xs:string">
      <xs:annotation>
        <xs:documentation>The username assigned to the user.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" use="required" type="xs:string">
      <xs:annotation>
        <xs:documentation>The password assigned to the user. This may be hashed if the corresponding authentication provider supports hashing (remember to set the "hash" attribute of the "user-service" element).</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authorities" use="required" type="xs:string">
      <xs:annotation>
        <xs:documentation>One of more authorities granted to the user. Separate authorities with a comma (but no space). For example, "ROLE_USER,ROLE_ADMINISTRATOR"</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:element name="jdbc-user-service">
    <xs:annotation>
      <xs:documentation>Causes creation of a JDBC-based UserDetailsService.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attribute name="id" type="xs:ID">
        <xs:annotation>
          <xs:documentation>A bean identifier, used for referring to the bean elsewhere in the context.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attributeGroup ref="security:jdbc-user-service.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="jdbc-user-service.attlist">
    <xs:attribute name="data-source" use="required" type="xs:string">
      <xs:annotation>
        <xs:documentation>The bean ID of the DataSource which provides the required tables.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
</xs:schema>
