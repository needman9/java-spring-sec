/* Copyright 2004, 2005, 2006 Acegi Technology Pty Limited
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.springframework.security.ui;

import javax.servlet.http.HttpServletRequest;

import org.springframework.security.Authentication;
import org.springframework.security.ui.savedrequest.SavedRequest;

/**
 * Default implementation for {@link TargetUrlResolver}
 * 
 * @author Martino Piccinato
 * @version $Id$
 * @since 2.0
 *
 */
public class TargetUrlResolverImpl implements TargetUrlResolver {
	
	/**
	 * If <code>true</code>, will only use <code>SavedRequest</code> to determine the target url on successful
     * authentication if the request that caused the authentication request was a GET.
     * It will return null on POST/PUT request.
	 * In most cases it's meaningless to redirect to a Url generated by a POST/PUT request.
     * Defaults to true.
	 */
	private boolean justUseSavedRequestOnGet = true;

    /* (non-Javadoc)
	 * @see org.acegisecurity.ui.TargetUrlResolver#determineTargetUrl(org.acegisecurity.ui.savedrequest.SavedRequest, javax.servlet.http.HttpServletRequest, org.acegisecurity.Authentication)
	 */
	public String determineTargetUrl(SavedRequest savedRequest, HttpServletRequest currentRequest,
            Authentication auth) {
			
        String targetUrl = null;

        if (savedRequest != null) {
            if (!justUseSavedRequestOnGet || savedRequest.getMethod().equals("GET")) {
                targetUrl = savedRequest.getFullRequestUrl();
            }
        }

        return targetUrl;
	}

	/**
	 * @return <code>true</code> if just GET request will be used
	 * to determine target URLs, <code>false</code> otherwise.
	 */
	protected boolean isJustUseSavedRequestOnGet() {
		return justUseSavedRequestOnGet;
	}

	/**
	 * @param justUseSavedRequestOnGet set to <code>true</code> if 
	 * just GET request will be used to determine target URLs, 
	 * <code>false</code> otherwise.
	 */
	public void setJustUseSavedRequestOnGet(boolean justUseSavedRequestOnGet) {
		this.justUseSavedRequestOnGet = justUseSavedRequestOnGet;
	}
	
}
