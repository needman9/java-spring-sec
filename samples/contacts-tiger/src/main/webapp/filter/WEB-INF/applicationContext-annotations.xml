<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">

<!--
  - Application context containing authentication beans.
  -
  - $Id$
  -->

<beans>

   <!-- ~~~~~~~~~~~~~~~~~~ "BEFORE INVOCATION" AUTHORIZATION DEFINITIONS ~~~~~~~~~~~~~~~~ -->

   <!-- ACL permission masks used by this application -->
   <bean id="org.acegisecurity.acls.domain.BasePermission.ADMINISTRATION" class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean">
      <property name="staticField"><value>org.acegisecurity.acls.domain.BasePermission.ADMINISTRATION</value></property>
   </bean>
   <bean id="org.acegisecurity.acls.domain.BasePermission.READ" class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean">
      <property name="staticField"><value>org.acegisecurity.acls.domain.BasePermission.READ</value></property>
   </bean>
   <bean id="org.acegisecurity.acls.domain.BasePermission.DELETE" class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean">
      <property name="staticField"><value>org.acegisecurity.acls.domain.BasePermission.DELETE</value></property>
   </bean>


   <!-- An access decision voter that reads ROLE_* configuration settings -->
   <bean id="roleVoter" class="org.acegisecurity.vote.RoleVoter"/>

   <!-- An access decision voter that reads ACL_CONTACT_READ configuration settings -->
   <bean id="aclContactReadVoter" class="org.acegisecurity.vote.AclEntryVoter">
      <constructor-arg>
      	<ref bean="aclService"/>
      </constructor-arg>
      <constructor-arg>
      	<value>ACL_CONTACT_READ</value>
      </constructor-arg>
      <constructor-arg>
      	<list>
          <ref local="org.acegisecurity.acls.domain.BasePermission.ADMINISTRATION"/>
          <ref local="org.acegisecurity.acls.domain.BasePermission.READ"/>
      	</list>
      </constructor-arg>
      <property name="processDomainObjectClass"><value>sample.contact.Contact</value></property>
   </bean>

   <!-- An access decision voter that reads ACL_CONTACT_DELETE configuration settings -->
   <bean id="aclContactDeleteVoter" class="org.acegisecurity.vote.AclEntryVoter">
      <constructor-arg>
      	<ref bean="aclService"/>
      </constructor-arg>
      <constructor-arg>
      	<value>ACL_CONTACT_DELETE</value>
      </constructor-arg>
      <constructor-arg>
      	<list>
          <ref local="org.acegisecurity.acls.domain.BasePermission.ADMINISTRATION"/>
          <ref local="org.acegisecurity.acls.domain.BasePermission.DELETE"/>
      	</list>
      </constructor-arg>
      <property name="processDomainObjectClass"><value>sample.contact.Contact</value></property>
   </bean>

   <!-- An access decision voter that reads ACL_CONTACT_ADMIN configuration settings -->
   <bean id="aclContactAdminVoter" class="org.acegisecurity.vote.AclEntryVoter">
      <constructor-arg>
      	<ref bean="aclService"/>
      </constructor-arg>
      <constructor-arg>
      	<value>ACL_CONTACT_ADMIN</value>
      </constructor-arg>
      <constructor-arg>
      	<list>
          <ref local="org.acegisecurity.acls.domain.BasePermission.ADMINISTRATION"/>
      	</list>
      </constructor-arg>
      <property name="processDomainObjectClass"><value>sample.contact.Contact</value></property>
   </bean>

   <!-- An access decision manager used by the business objects -->
   <bean id="businessAccessDecisionManager" class="org.acegisecurity.vote.AffirmativeBased">
      <property name="allowIfAllAbstainDecisions"><value>false</value></property>
      <property name="decisionVoters">
         <list>
            <ref local="roleVoter"/>
            <ref local="aclContactReadVoter"/>
            <ref local="aclContactDeleteVoter"/>
            <ref local="aclContactAdminVoter"/>
         </list>
      </property>
   </bean>

   <!-- ========= ACCESS CONTROL LIST LOOKUP MANAGER DEFINITIONS ========= -->

	<bean id="aclCache" class="org.acegisecurity.acls.jdbc.EhCacheBasedAclCache">
		<constructor-arg>
		   <bean class="org.springframework.cache.ehcache.EhCacheFactoryBean">
		      <property name="cacheManager">
				<bean class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean"/>
		      </property>
		      <property name="cacheName">
		         <value>aclCache</value>
		      </property>
		   </bean>
		</constructor-arg>
	</bean>
    
	<bean id="lookupStrategy" class="org.acegisecurity.acls.jdbc.BasicLookupStrategy">
		<constructor-arg ref="dataSource"/>
		<constructor-arg ref="aclCache"/>
		<constructor-arg ref="aclAuthorizationStrategy"/>
		<constructor-arg>
			<bean class="org.acegisecurity.acls.domain.ConsoleAuditLogger"/>
		</constructor-arg>
	</bean>
	
	<bean id="aclAuthorizationStrategy" class="org.acegisecurity.acls.domain.AclAuthorizationStrategyImpl">
		<constructor-arg>
			<list>
				<bean class="org.acegisecurity.GrantedAuthorityImpl">
					<constructor-arg value="ROLE_ADMINISTRATOR"/>
				</bean>
				<bean class="org.acegisecurity.GrantedAuthorityImpl">
					<constructor-arg value="ROLE_ADMINISTRATOR"/>
				</bean>
				<bean class="org.acegisecurity.GrantedAuthorityImpl">
					<constructor-arg value="ROLE_ADMINISTRATOR"/>
				</bean>
			</list>
		</constructor-arg>
	</bean>
	
	<bean id="aclService" class="org.acegisecurity.acls.jdbc.JdbcMutableAclService">
		<constructor-arg ref="dataSource"/>
		<constructor-arg ref="lookupStrategy"/>
		<constructor-arg ref="aclCache"/>
	</bean>

   <!-- ============== "AFTER INTERCEPTION" AUTHORIZATION DEFINITIONS =========== -->

   <bean id="afterInvocationManager" class="org.acegisecurity.afterinvocation.AfterInvocationProviderManager">
      <property name="providers">
         <list>
            <ref local="afterAclRead"/>
            <ref local="afterAclCollectionRead"/>
         </list>
      </property>
   </bean>
   
   <!-- Processes AFTER_ACL_COLLECTION_READ configuration settings -->
   <bean id="afterAclCollectionRead" class="org.acegisecurity.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider">
      <constructor-arg>
      	<ref bean="aclService"/>
      </constructor-arg>
      <constructor-arg>
      	<list>
          <ref local="org.acegisecurity.acls.domain.BasePermission.ADMINISTRATION"/>
          <ref local="org.acegisecurity.acls.domain.BasePermission.READ"/>
      	</list>
      </constructor-arg>
   </bean>
   
   <!-- Processes AFTER_ACL_READ configuration settings -->
   <bean id="afterAclRead" class="org.acegisecurity.afterinvocation.AclEntryAfterInvocationProvider">
      <constructor-arg>
      	<ref bean="aclService"/>
      </constructor-arg>
      <constructor-arg>
      	<list>
          <ref local="org.acegisecurity.acls.domain.BasePermission.ADMINISTRATION"/>
          <ref local="org.acegisecurity.acls.domain.BasePermission.READ"/>
      	</list>
      </constructor-arg>
   </bean>

    <!-- ================= METHOD INVOCATION AUTHORIZATION ==================== -->

	<bean id="attributes" class="org.acegisecurity.annotation.SecurityAnnotationAttributes"/>
	
	<bean id="objectDefinitionSource" class="org.acegisecurity.intercept.method.MethodDefinitionAttributes">
		<property name="attributes"><ref local="attributes"/></property>
	</bean>

	<!-- We don't validate config attributes, as it's unsupported by MethodDefinitionAttributes -->
	<bean id="securityInterceptor" class="org.acegisecurity.intercept.method.aopalliance.MethodSecurityInterceptor">
    	<property name="validateConfigAttributes"><value>false</value></property>
    	<property name="authenticationManager"><ref bean="authenticationManager"/></property>
    	<property name="accessDecisionManager"><ref bean="businessAccessDecisionManager"/></property>
    	<property name="afterInvocationManager"><ref bean="afterInvocationManager"/></property>
 		<property name="objectDefinitionSource"><ref bean="objectDefinitionSource"/></property>
	</bean>
	
	<!--
		This bean is a postprocessor that will automatically apply relevant advisors
		to any bean in child factories.
	-->
	<bean id="autoproxy" 
		class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator">
	</bean>

	<!--
		AOP advisor that will automatically wire the MethodSecurityInterceptor (above)
		The configuration attributes used are obtained from the securityInterceptor.objectDefinitionSouce, 
		which in the above configuration is a JDK 5 Annotations Attributes-based source.
	-->
	<bean id="methodSecurityAdvisor"
		class="org.acegisecurity.intercept.method.aopalliance.MethodDefinitionSourceAdvisor"
		autowire="constructor" >
	</bean>
		   
	<!--
		AOP advisor used for declarative transaction management
	-->
	<bean class="org.springframework.transaction.interceptor.TransactionAttributeSourceAdvisor">
		<property name="transactionInterceptor" ref="transactionInterceptor"/>
	</bean>

	<!--
		Transaction interceptor to use for auto-proxy creation
	-->
	<bean id="transactionInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor">
		<property name="transactionManager" ref="transactionManager"/>
		<property name="transactionAttributeSource">
			<bean class="org.springframework.transaction.annotation.AnnotationTransactionAttributeSource"/>
		</property>
	</bean>		   

</beans>
